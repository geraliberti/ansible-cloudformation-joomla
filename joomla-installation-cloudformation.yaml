---
# Create VPC
VPC:
  Type: AWS::EC2::VPC
  Properties:
    CidrBlock: 10.0.0.0/23


# IAM role definitions
Describe:
  Type: AWS::IAM::Role
  Properties:
    Description: 'This role will be attached to the EC2 machines with ansible'
    RoleName: EC2_Role
    Policies:
      Statement:
        - Effect: Allow
          Action: ec2:DescribeInstances
          Resource: !Ref TargetInstance

CloudWatch:
  Type: AWS::IAM::Role
  Properties:
    Description: 'This role will be attached to the target EC2 machines to access cloudwatch logs'
    RoleName: EC2_Role_Cloudwatch
        - Effect: Allow
          Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            - logs:DescribeLogStreams
          Resource: arn:aws:logs:*:*:*

InstanceProfile1:
  Type: AWS::IAM::InstanceProfile
  Properties:
    Roles: Describe

InstanceProfile2:
  Type:
    Properties:
      Roles: CloudWatch

# Subnet Creation

Subnet1:
  Type: AWS::EC2::Subnet
  Properties:
    AvailabilityZone: eu-west-1a
    CidrBlock: 10.0.0.0/24
    MapPublicIpOnLaunch: true
    VpcId: !Ref VPC
# subnet where the DB will be placed
SubnetDB:
  Type: AWS::RDS::DBSubnetGroup
  Properties:
    SubnetIds:
      - Ref! Subnet3
      - Ref! Subnet4
Subnet3:
  Type: AWS::EC2::Subnet
  Properties:
    AvailabilityZone: eu-west-1a
    CidrBlock: 10.0.1.0/28
    MapPublicIpOnLaunch: false
    VpcId: !Ref VPC
Subnet4:
  Type: AWS::EC2::Subnet
  Properties:
    vailabilityZone: eu-west-1b
    CidrBlock: 10.0.1.16/28
    MapPublicIpOnLaunch: false
    VpcId: !Ref VPC

# Parameters
Parameters:
  InstanceType:
    Description: all the allowed EC2 types
    Type: String
    Default: r3.4xlarge
    AllowedValues: [t1.micro, t2.nano, t2.micro, t2.small, t2.medium, t2.large, m1.small,
      m1.medium, m1.large, m1.xlarge, m2.xlarge, m2.2xlarge, m2.4xlarge, m3.medium,
      m3.large, m3.xlarge, m3.2xlarge, m4.large, m4.xlarge, m4.2xlarge, m4.4xlarge,
      m4.10xlarge, c1.medium, c1.xlarge, c3.large, c3.xlarge, c3.2xlarge, c3.4xlarge,
      c3.8xlarge, c4.large, c4.xlarge, c4.2xlarge, c4.4xlarge, c4.8xlarge, g2.2xlarge,
      g2.8xlarge, r3.large, r3.xlarge, r3.2xlarge, r3.4xlarge, r3.8xlarge, i2.xlarge,
      i2.2xlarge, i2.4xlarge, i2.8xlarge, d2.xlarge, d2.2xlarge, d2.4xlarge, d2.8xlarge,
      hi1.4xlarge, hs1.8xlarge, cr1.8xlarge, cc2.8xlarge, cg1.4xlarge]

  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instances
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair

# The ebs to be attached to the instances

Block1:
  - DeviceName: /dev/sdc
    Ebs:
      VolumeType: gp2
      VolumeSize: 25
      DeleteOnTermination: true

Block2:
  - DeviceName: /dev/sda
    Ebs:
      VolumeType: io1
      VolumeSize: 150
      DeleteOnTermination: false


# the instance that will host the application
TargetInstance:
  Type: AWS::EC2::Instance
  Properties:
    AvailabilityZone: eu-west-1a
    BlockDeviceMappings: !Ref Block2
    #Image id it's a predefined ubuntu image in eu-west-1 region
    ImageId: ami-071e6d171b20431fb
    InstanceType: !Ref InstanceType
    IamInstanceProfile: !Ref InstanceProfile2
    KeyName: !Ref KeyName
    SubnetId: !Ref Subnet1
    SecurityGroups: !Ref ServerSecurityGroupEC2
    PrivateIpAddress: 10.0.0.100
    Tags:
      -
        Key: "Role"
        Value: "Target"

AnsibleInstance:
  Type: AWS::EC2::Instance
  CreationPolicy:
    ResourceSignal:
      Count: 3
      Timeout: PT30M
  Properties:
    AvailabilityZone: eu-west-1a
    BlockDeviceMappings: !Ref Block1
    #Image id it's a predefined ubuntu image in eu-west-1 region
    ImageId: ami-071e6d171b20431fb
    InstanceType: m4.2xlarge
    IamInstanceProfile: !Ref InstanceProfile1
    KeyName: !Ref KeyName
    SubnetId: !Ref Subnet1
    SecurityGroups: !Ref ServerSecurityGroupEC2
    UserData:
      '#!/bin/bash
      #commands are automatically run as sudo inside UserData
      apt update
      apt install git
      git clone https://github.com/geraliberti/ansible-cloudformation-joomla.git /home/ec2-user/git-repo
      ansible-playbook /home/ec2-user/git-repo/joomla-installation-playbook.yaml -i /home/ec2-user/git-repo/inventories/hosts.ini
      '
    Tags:
     -
       Key: "Role"
       Value: "Ansible"



# the security groups
ServerSecurityGroupEC2:
  Type: AWS::EC2::SecurityGroup
  Properties:
    GroupDescription: allow connection on port 443 - HTTPS / allow connections on port 22 from internal IPs
    SecurityGroupIngress:
    - IpProtocol: tcp
      FromPort: 443
      ToPort: 443
      SourceSecurityGroupId: !Ref ServerSecurityGroupELB
    - IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      CidrIp: 10.0.0.0/24
    - IpProtocol: tcp
      FromPort: 5000
      ToPort: 5100
      CidrIp: 10.0.0.0/24
ServerSecurityGroupELB:
  Type: AWS::EC2::SecurityGroup
  Properties:
    GroupDescription: allow connection on port 443 - HTTPS
    SecurityGroupIngress:
    - IpProtocol: tcp
      FromPort: 443
      ToPort: 443
      CidrIp: 0.0.0.0/0
ServerSecurityGroupDB:
  Type: AWS::EC2::SecurityGroup
  Properties:
    GroupDescription: allow connection on port 3306 - MYSQL
    SecurityGroupIngress:
    - IpProtocol: tcp
      FromPort: 3306
      ToPort: 3306
      SourceSecurityGroupId: ServerSecurityGroupEC2

# defining autoscaling Group and launc configuration
Autoscaling:
  Type: AWS::AutoScaling::AutoScalingGroup
  Properties:
    AutoScalingGroupName: EC2-Autoscaling-Group
    AvailabilityZones:
      - eu-west-1a
      - eu-west-1b
      - eu-west-1c
    DesiredCapacity: 4
    HealthCheckType: ELB
    LaunchConfigurationName: !Ref LaunchConfiguration
    TargetGroupARNs: !Ref ALBTargetGroup

LaunchConfiguration:
  Type: AWS::AutoScaling::LaunchConfiguration
  Properties:
     ImageId: AMI-Joomla
     InstanceType: !Ref 'InstanceType'
     IamInstanceProfile: !Ref InstanceProfile2
     InstanceMonitoring: true
     KeyName: !Ref KeyName
     SecurityGroups: !Ref ServerSecurityGroupEC2

LoadBalancer:
  Type: AWS::ElasticLoadBalancingV2::LoadBalancer
  Properties:
    Scheme: internet-facing
    SecurityGroups: !Ref 'ServerSecurityGroupELB'
ALBTargetGroup:
  Type: AWS::ElasticLoadBalancingV2::TargetGroup
  Properties:
    HealthCheckEnabled: true
    HealthCheckIntervalSeconds: 30
    HealthCheckPort: 443
    HealthCheckProtocol: HTTPS
    HealthCheckTimeoutSeconds: 10
    HealthyThresholdCount: 3
    UnhealthyThresholdCount: 4
    Port: 443
    Protocol: HTTPS
    TargetType: instance
    TargetGroupAttributes:
      - stickiness.enabled: true
      - load_balancing.algorithm.type: least_outstanding_requests
    VpcId: !Ref VPC


RDS:
    Type: AWS::RDS::DBInstance
    Properties:
       AvailabilityZone: eu-west-1a
       DBInstanceClass: db.m5
       DBName: DB-Joomla
       DBSubnetGroupName: !Ref SubnetDB
       DBSecurityGroups: !Ref ServerSecurityGroupDB
       EnableIAMDatabaseAuthentication: True
       Port: 3306

# Monitoring

CloudwatchJoomla_4xx:
  Type: AWS::CloudWatch::Alarm
  Properties:
    AlarmName: 'Too many 4xx http responses received'
    AlarmActions: !Ref AlarmNotificationTopic
    DatapointsToAlarm: 3
    MetricName: HTTP4xxErrors
    Period: 300
    Threshold: 10

# SNS

AlarmNotificationTopic:
  Type: AWS::SNS::Topic
  Properties:
    DisplayName: Notification1
#Subscriptions:
AlarmNotificationSubscription:
  Type: AWS::SNS::Subscription
  Properties:
    Endpoint: L2_support@joomla.com
    Protocol: email
    TopicArn: !Ref AlarmNotificationTopic

# LogGroup
LogGroup:
  Type: AWS::Logs::LogGroup
  Properties:
    Name: joomla-log-group
    RetentionInDays: 7

# S3 bucket creation - will be used to store logs
S3Bucket1:
  Type: "AWS::S3::Bucket"
  Properties:
    AccessControl: "Private"
    BucketName: "bucketforlogs"
    LifecycleConfiguration:
      Rules:
        - ID: LogsDeletionRule
          Status: Enabled
          ExpirationInDays: '7'
